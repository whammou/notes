#+TITLE: Package Notebook
#+DESCRIPTION: Add notebook description here
#+OPTIONS: ^:nil

* Tasks :TASK:SYSTEM:PACKAGE:
Allocated space for tasks/todos
** One-off :ONEOFF:
*** PENDING Create qtile widget :QTILE:
- *OBJECTIVE:* Create a custom qtile widget
- *Reference:* [[https://docs.qtile.org/en/latest/manual/howto/widget.html][Create a qtile widget @Doc-qtile]]
*** TODO Orgroam zettelkasten :ZETTELKASTEN:
DEADLINE: <2025-06-25 Wed 21:00>
:PROPERTIES:
:ID:       1e76b464-a6af-40b5-98a5-40d7e4ab3c84
:END:
- *OBJECTIVE:* Apply [[id:705d42e4-c980-4d53-ad38-029f28d503dc][The Zettelkasten system]] with orgroam
- *Reference:*
  - [[https://www.youtube.com/watch?v=-TpWahIzueg#__preview][Orgroam zettelkasten @Youtube]]
  - [[https://yannherklotz.com/zettelkasten/][Zettelkasten in orgmode @Blog]]
  - [[https://www.youtube.com/embed/-TpWahIzueg?start=49m16s#__preview][Apply zettelkasten correctly in orgroam @Youtube]]
**** Orgroam extension :ORGROAM:
:PROPERTIES:
:ID:       ca2cbb16-4d86-419e-a1f6-9a48640ce323
:END:
- *OBJECTIVE:* [[id:1902d6da-cad7-4fd8-9de5-001ede5334e1][Implementation]] of orgroam to manage zettelkasten vault
- *Reference:*
  - [[https://www.youtube.com/watch?v=AyhPmypHDEw#__preview][Getting started with orgroam @Youtube]]
  - [[https://github.com/chipsenkbeil/org-roam.nvim][Org-roam nvim plugin @Github]]
  - [[https://l.opnxng.com/r/emacs/comments/u10j69/org_mode_how_do_you_keep_your_daily_agenda_to_a/][How do you keep your daily agenda @Reddit]]
*** TODO Qutebrowser multiple mode keybind :QUTEBROWSER:
- *OBJECTIVE:* How to bind key in different modes
- *Reference:* [[qute://help/configuring.html][Configurating qutebrowser @Doc-qutebrowser]]
*** TODO Detect git repos from system :GIT:FZF:
- /Detect system wise git repos the use fzf to open lazygit at repo location/
*** TODO Nvim indent align :NVIM:
- *Objective:* /Manage nvim virtual indentaion alignment in plugins:/
  - [ ] ~nvim-orgmode~ 
  - [ ] ~render-markdown~
*** TODO Connect to running nvim server :NVIM:
- *Objective:* /Connect to running/ ~nvim-server~ /apply to/ ~orgmode~
  - *Visit:* [[https://github.com/neovim/neovim/issues/5035][github.com#\:connect-to-nvim-server @Github]]
*** Qtile keymap in json :QTILE:
- *Idea:* /Write key map and run in python/
**** Encode keymap json :JSON:
- *Objective:* /Encode [[file:~/.config/qtile/settings/keymaps.py][keymaps.py]] in json/
- *References:* [[id:27fdd8c2-5435-466b-9856-407ade06d893][Json database @Orgmode]]
**** Decode json files :PYTHON:
- *Objective:* /Deocde [[file:~/.config/qtile/settings/keymaps.py][keymaps.py]] using python/
- *References:* [[https://docs.python.org/3/library/json.html][Json encoder and decoder using python @Python-doc]]
*** PENDING Change floating window size :QTILE:
- *OBJECTIVE:* Define window size when in floating layout
*** PENDING Change snack.nvim border style :NVIM:
- *OBJECTIVE:* Replace rounded border style in snack.nvim with static style for more aesthetic
- *Reference:* 
  - [[http://www.lazyvim.org/plugins][Lazyvim core plugins @Doc-lazyvim]]
  - [[https://github.com/LazyVim/LazyVim/issues/1942#issuecomment-1793438952][Changing border with nvim-lspconfig @Github-issue]]
*** TODO Create scripted tmux session :TMUX:
- *OBJECTIVE:* Create a persist session for orgmode notes/
- *Complication:* nvim does not allow edit if multiple session are running
- *Reference:* [[https://ryan.himmelwright.net/post/scripting-tmux-workspaces/][Scripting tmux workspace @Blog]]
*** Working with nvim snippets :NVIM:SNIPPET:
- *OBJECTIVE:* Custom snippets to boost productivity
**** TODO Friendly snippet insert date :FRIENDLYSNIP:
- *OBJECTIVE:* /Create note block with today inserted/
- *References:* [[https://l.opnxng.com/r/neovim/comments/wi4uf3/how_do_i_insert_current_date_or_time/][Insert today date in friendly snippet @Reddit]]
**** Setting up luasnip :LUASNIP:
- *OBJECTIVE:* Writing custom luasnip snippets
*** TODO Working with pandoc :PANDOC:
- *OBJECTIVE:* /Develop workflow with pandoc to convert between files/
**** TODO Pandoc font settings :PANDOC:
Set conversion fonts from =markdown= to =LaTex=
***Visit:* [[https://a.opnxng.com/exchange/tex.stackexchange.com/questions/234786/how-to-set-a-font-family-with-pandoc][pandoc fonts]]
*** TODO Working with git [0%] :GIT:
- *OBJECTIVE:* /Improve workflow with nvim, fugitive, lazygit/
- *References:*
  - [[https://youtu.be/vtFXMni91Q4#__preview][Fugitive workflow @Youtube-preview]]
  - [[https://www.youtube.com/watch?v=G3NJzFX6XhY#__preview][Config your git @Youtube]]
**** TODO Write better commit messages
- *Goal(s):* Write better and more comprehensive commit messages
- *Stumble upon:* [[https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/]]
***** The Anatomy of a Commit Message
- *Basic:*
  =git commit -m <message>=
- *Detailed:*
  =git commit -m <title> -m <description>=
***** 5 Steps to write a better commit message
- Note taken on [2024-09-21 Sat 21:37] \\
  To come up with thoughtful commits consider the following: 
  - Why have I made these changes?
  - What effect have my changes made?
  - Why was the change needed?
  - What are the changes in reference?
    
1. *Capitalization and Punctuation:*
   Capitalize the first word and do not end in punctuation. If using /Convention Commits/, remember to use all lowercase
2. *Mood:*
   Use imperative mood in the subject line. *Example -* =Add fix= for =dark mode toggle state=. Imperative mood fives the tone you are giving in /order/ or /request/
3. *Type of Commit:*
   Specify the type of commit. It is recommended and can be even more beneficial to have consistent set of words to describe your changes. *Example:* /Bugfix/, /Update/, /Retractor/, /Bump/, and so on.
4. *Length:*
   The first line should ideally be no longer than 50 chars, and the body should be restricted to 72 chars
5. *Content:*
   Be direct, try to eliminate fillers words and phrases in theses sentences (*Example:* though, maybe, I think, kind of), Think like a journalist
***** Conventional Commits
Conventional Commit is a formatting convention that provides as set of rules to formulate a consistent commit message structure like so:

#+NAME: Conventional Commit structure
#+BEGIN_SRC
<type>[option scope]: <description>

[optional body]

[optional footer(s)]
#+END_SRC

The commit =type= can include the following:

- =feat= -a new feature is introduces with the changes
- =fix= -a bug fix has occurred
- =chore= -changes that do not relate to a fix or feature and don't modify src or test files (for example updating dependencies)
- =refractor= -refactored code that neither fixes a bug nor adds a feature
- =doc= - updates to documentation such as the README or other markdown files
- =style= -changes that do not affect the meaning of the code, likely realted to code formatting such as white-space, missing semi-colons, and so on
- =test= -including new or correcting previous tests
- =perf= -performance improvements
- =ci= -continuous integration related
- =build= -changes tha affect the build system or external dependencies
- =revert= -reverts a previous commit
  
/The commit type subject line should be all lowercase with a character limit to encourage succinct descriptions/

The =[optional commit body]= should be used to provide detail that cannot fit within the character limitations of the subject line description

It is also good location to utilize =BREAKING CHANGE: <description>= to note the reason for a breaking change within the commit

The =[footer]= is also optional. We use the footer to link the JIRA story what would be closed with these changes for example:
=Closes D2!I-<JIRA #>=

#+NAME: Full Conventional Commit Example
#+BEGIN_SRC
fix: fix foo to enable bar

This fixes the broken behavior of the component by doing xyz. 

BREAKING CHANGE
Before this fix foo wasn't enabled at all, behavior changes from <old> to <new>

Closes D2IQ-12345
#+END_SRC

- *NOTE*
  The ensure that these committing conventions remain consistent across developers, commit message linting can be configured before changes are able to be pushed up. [[https://commitizen-tools.github.io/commitizen/][Commitizen]] is a great tool to enforce standards, sync up semantic versioning, along with other helpful features
**** TODO Git automation
- *OBJECTIVE:* /Automate tasks with git/
- *References:* [[https://www.reddit.com/r/git/comments/xvz4he/automating_git_tasks_best_practices/][Automation with git @Reddit]]
**** TODO Clean commit history
- *OBJECTIVE:* Clean up git commit history
- *Reference:* [[https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History][Git tools rewrite history @Doc-git]]
**** TODO Securely storing secrets in git
- *OBJECTIVE:* Learn how to securely store secrets in git
*** DOING Working with rclone [66%] :RCLONE:
:PROPERTIES:
:ID:       3700b025-3d42-4516-a17d-0eb37366d087
:END:
- *OBJECTIVE:* /Config rclone for optimal workflow/
**** ABORTED Mount as a systemd service :SYSTEMD:
CLOSED: [2025-06-03 Tue 07:45]
- *OBJECTIVE:* /Running rclone mount as a systemd service/
- *References:* [[https://rclone.org/commands/rclone_mount/][Rclone mount @Doc-rclone]]
**** DOING Mount dir menu [50%] :ROFI:
:PROPERTIES:
:ID:       657f70b1-56fe-4503-93cb-3a2987f002e8
:END:
- [X] *OBJECTIVE:* /Mount directories via rofi menu/
+- [ ] *OBJECTIVE:* /Config mount point dest/+
- *Checkout:* related files
  - [[file:=/.config/qtile/settings/widgets.py][widgets.py @Qtile-config]]
  - [[file:=/dotfiles/scripts/rofi-mount][rofi-mount @Rofi-script]]
- *References:* [[https://l.opnxng.com/r/archlinux/comments/15mz7rj/bash_script_to_mountunmount_rclone_affiliated/?tl=zh-hant][Script mount/umount rclone mount points @Reddit]]
***** TODO Change icons in qtile bar accordingly
- *Complication:* Icons for mulitple clouds
**** DONE Workaround rclone cache mode
CLOSED: [2025-06-03 Tue 07:43]
:PROPERTIES:
:ID:       b1c36c41-af26-452e-9bca-002fc835cc5f
:END:
- *OBJECTIVE:* /Cache mode takes a lot of space, workaround this issue/
- *Checkout:* [[https://forum.rclone.org/t/why-arent-cache-rclone-files-being-removed/28948/8][Vfs cache explain @Forum-rclone]]
- *References:* [[https://l.opnxng.com/r/rclone/comments/xnbhsx/rclone_mount_with_vfs_cache_mode_full_is_using_up/][Cache mode using up space @Reddit]]
*** TODO Disable blink.cmp for orgroam menu :NVIM:BLINK:ORGROAM:
- *OBJECTIVE:* Disable completion in orgroam buffer
- *[NOTE]* taken on [2025-06-25 22:33]:
  #+NAME: Disable completion nvim-cmp
  #+BEGIN_SRC lua
  require('nvim-cmp').setup({
  enabled = function()
  local buftype = vim.api.nvim_get_option_value("buftype", { buf = 0 })
  if buftype == "nofile" then
  return false
  end
  -- ... handling other conditions
  end
  })
  #+END_SRC
- *Reference:*
  - [[https://github.com/chipsenkbeil/org-roam.nvim/blob/8369398de7c343732eea89f834b1bc71f1f110da/DOCS.org#disable-nvim-cmp-completion-in-select-buffer][Disable completion in orgroam buffer @Github]]
  - [[https://cmp.saghen.dev/configuration/general#general][Blink.cmp general options @Doc]]
*** PENDING Understanding git :GIT:
/Understand the fundamentals of the git tool/
**** Git config
There are two locations a git config file can exist:
- *Local* git repo: in the repo itself (and ignored by ~.gitignore~)
- *Global* exist outside of the repo e.g. [[file:/home/whammou/.gitconfig][gitconfig]]
**** Git merge vs re-base vs squashing
There are different strategies to merge two ~branches~:
- *Merging:* Merge and ties together the ~history~ of both ~branches~
- *Re-basing:* Merge the ~commits~ of a branch to the *tip* of ~main~ and then performs a ~fast-forward-merge~
- *Squashing:* Squeeze all the ~commits~ of ~feature branch~ into one single ~commit~ and merge it with ~main~
**** Git commit vs stash
*Visit:* [[https://paulapivat.com/technical_notes/example_tech/git_stash/][Git Stash vs Git Commit]]
** Incidental :INCIDENTAL:
** Coordinated :COORDINATED:
** Urgent :URGENT:
** Recurring :RECURRING:
